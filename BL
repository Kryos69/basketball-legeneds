-- // Game Check
local targetGameId = 4581966615 -- Basketball Legends PlaceId
if game.PlaceId ~= targetGameId then
    game:GetService("Players").LocalPlayer:Kick("This script is designed for Basketball Legends only!")
    return
end

-- // Load Fluent UI Library with Error Handling
local Fluent, SaveManager, InterfaceManager
local fluentLoaded, fluentErr = pcall(function()
    Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
end)

if not fluentLoaded or not Fluent then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Error",
        Text = "Failed to load Fluent UI: " .. tostring(fluentErr),
        Duration = 5
    })
    return
end

-- // Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")

local localPlayer = Players.LocalPlayer

-- // RemoteEvents
local ControlServiceRE, StartShoot, Shoot
local remotesLoaded, remoteErr = pcall(function()
    ControlServiceRE = ReplicatedStorage:WaitForChild("Packages", 5):WaitForChild("Knit", 5):WaitForChild("Services", 5):WaitForChild("ControlService", 5):WaitForChild("RE", 5)
    StartShoot = ControlServiceRE:WaitForChild("StartShoot", 5)
    Shoot = ControlServiceRE:WaitForChild("Shoot", 5)
end)

if not remotesLoaded or not StartShoot or not Shoot then
    StarterGui:SetCore("SendNotification", {
        Title = "Error",
        Text = "Failed to find RemoteEvents: " .. tostring(remoteErr),
        Duration = 5
    })
    return
end

-- // UI Setup
local Window = Fluent:CreateWindow({
    Title = "Spare Stack - Fluent",
    SubTitle = "Basketball Legends Script",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Home = Window:AddTab({ Title = "Home", Icon = "home" }),
    Main = Window:AddTab({ Title = "Main", Icon = "zap" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    AntiExploiter = Window:AddTab({ Title = "Anti-Exploiter", Icon = "shield" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "settings" })
}

local Options = Fluent.Options

Tabs.Home:AddParagraph({
    Title = "Script Info",
    Content = "Updated: Aug 4, 2025\nVersion: 1.0.1\nWelcome to Spare Stack!"
})

-- // Auto Green (E Key)
local autoGreenEnabled = false

local function runShootingSequence()
    local function fireSafe(remote, ...)
        for i = 1, 3 do
            local ok, err = pcall(function()
                remote:FireServer(...)
            end)
            if ok then return true end
            task.wait(0.1)
        end
        StarterGui:SetCore("SendNotification", {
            Title = "Auto Green",
            Text = "Failed to fire: " .. remote.Name,
            Duration = 3
        })
        return false
    end

    -- use the helper function with arguments explicitly
    coroutine.wrap(function()
        if fireSafe(StartShoot) then
            task.wait(0.23)
            if fireSafe(Shoot, 1) then
                task.wait(0.23)
                fireSafe(Shoot, 0)
            end
        end
    end)()
end


UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if autoGreenEnabled and input.KeyCode == Enum.KeyCode.E then
        runShootingSequence()
    end
end)

Tabs.Main:AddToggle("AutoGreen", {
    Title = "Enable Auto Green (E)",
    Default = false,
    Description = "Press E to shoot automatically"
}):OnChanged(function(state)
    autoGreenEnabled = state
end)

-- // Walkspeed
local walkspeedEnabled, walkspeedValue = false, 16
local walkConn

local function updateWalk()
    if walkConn then walkConn:Disconnect() end
    if walkspeedEnabled then
        walkConn = RunService.Heartbeat:Connect(function(dt)
            local char = localPlayer.Character
            local hrp = char and char:FindFirstChild("HumanoidRootPart")
            local hum = char and char:FindFirstChildOfClass("Humanoid")
            if hrp and hum then
                local move = hum.MoveDirection
                if move.Magnitude > 0 then
                    hrp.CFrame += move.Unit * walkspeedValue * dt
                end
            end
        end)
    end
end

Tabs.Player:AddToggle("WalkspeedToggle", {
    Title = "Enable Walkspeed",
    Default = false
}):OnChanged(function(state)
    walkspeedEnabled = state
    updateWalk()
end)

Tabs.Player:AddSlider("WalkspeedSlider", {
    Title = "Walkspeed Value",
    Min = 1,
    Max = 100,
    Default = 16,
    Rounding = 0
}):OnChanged(function(val)
    walkspeedValue = val
end)

-- // Hitbox Expander
local hitboxEnabled, hitboxRadius = false, 50
local hitboxConn

local function simulateTouch(ball)
    local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
    if root and firetouchinterest then
        pcall(function()
            firetouchinterest(root, ball, 0)
            task.wait()
            firetouchinterest(root, ball, 1)
        end)
    end
end

local function updateHitbox()
    if hitboxConn then hitboxConn:Disconnect() end
    if hitboxEnabled then
        hitboxConn = RunService.Heartbeat:Connect(function()
            local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
            if not root then return end
            for _, ball in pairs(Workspace:GetChildren()) do
                if ball:IsA("BasePart") and ball.Name == "Basketball" then
                    if (ball.Position - root.Position).Magnitude <= hitboxRadius then
                        simulateTouch(ball)
                    end
                end
            end
        end)
    end
end

Tabs.Player:AddToggle("HitboxToggle", {
    Title = "Enable Hitbox Expander",
    Default = false
}):OnChanged(function(state)
    hitboxEnabled = state
    updateHitbox()
end)

Tabs.Player:AddSlider("HitboxSlider", {
    Title = "Hitbox Radius",
    Min = 10,
    Max = 100,
    Default = 50
}):OnChanged(function(val)
    hitboxRadius = val
end)

-- // Noclip
local noclipEnabled = false
local noclipConn

local function setCollision(state)
    local char = localPlayer.Character
    if not char then return end
    for _, p in ipairs(char:GetDescendants()) do
        if p:IsA("BasePart") then p.CanCollide = state end
    end
end

local function updateNoclip()
    if noclipConn then noclipConn:Disconnect() end
    if noclipEnabled then
        noclipConn = RunService.Stepped:Connect(function()
            setCollision(false)
        end)
    else
        setCollision(true)
    end
end

Tabs.Player:AddToggle("NoclipToggle", {
    Title = "Enable Noclip",
    Default = false
}):OnChanged(function(state)
    noclipEnabled = state
    updateNoclip()
end)

-- // Auto Guard
local autoGuardUIEnabled, autoGuardActive = false, false
local currentTarget = nil
local offsetDistance = 4

local predictionSphere = Instance.new("Part")
predictionSphere.Anchored = true
predictionSphere.CanCollide = false
predictionSphere.Material = Enum.Material.Neon
predictionSphere.Size = Vector3.new(2, 2, 2)
predictionSphere.Shape = Enum.PartType.Ball
predictionSphere.Transparency = 1
predictionSphere.Color = Color3.new(1, 0, 0)
predictionSphere.Name = "PredictionSphere"
predictionSphere.Parent = Workspace

local function hasToolEquipped(char)
    for _, item in pairs(char:GetChildren()) do
        if item:IsA("Tool") then return true end
    end
    return false
end

local function getClosestPlayer()
    local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not root then return nil end
    local closest, minDist = nil, math.huge
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= localPlayer and plr.Character then
            local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
            if hrp and hasToolEquipped(plr.Character) then
                local dist = (hrp.Position - root.Position).Magnitude
                if dist < minDist then
                    minDist = dist
                    closest = plr
                end
            end
        end
    end
    return closest
end

RunService.Heartbeat:Connect(function()
    if not autoGuardUIEnabled or not autoGuardActive then
        predictionSphere.Transparency = 1
        currentTarget = nil
        return
    end

    local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end

    if not currentTarget then
        currentTarget = getClosestPlayer()
    end

    if currentTarget and currentTarget.Character then
        local tHRP = currentTarget.Character:FindFirstChild("HumanoidRootPart")
        if hasToolEquipped(currentTarget.Character) and tHRP then
            local predicted = tHRP.Position + tHRP.CFrame.LookVector * offsetDistance
            predictionSphere.Position = predicted
            predictionSphere.Transparency = 0.4
            root.CFrame = CFrame.new(predicted, tHRP.Position)
        else
            predictionSphere.Transparency = 1
            currentTarget = nil
        end
    end
end)

Tabs.Main:AddToggle("AutoGuardToggle", {
    Title = "Enable Auto Guard",
    Default = false,
    Description = "Press T to toggle targeting"
}):OnChanged(function(state)
    autoGuardUIEnabled = state
    if not state then
        autoGuardActive = false
        predictionSphere.Transparency = 1
        currentTarget = nil
    end
end)

UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.T and autoGuardUIEnabled then
        autoGuardActive = not autoGuardActive
        if not autoGuardActive then
            predictionSphere.Transparency = 1
            currentTarget = nil
        end
    end
end)

-- // Save + Interface Manager
SaveManager:BuildConfigSection(Tabs.Misc)
InterfaceManager:BuildInterfaceSection(Tabs.Misc)
