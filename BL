-- // Load Rayfield UI Library
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- // Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local localPlayer = Players.LocalPlayer

-- // Control Service Remotes
local ControlServiceRE = ReplicatedStorage.Packages.Knit.Services.ControlService.RE
local StartShoot = ControlServiceRE.StartShoot
local Shoot = ControlServiceRE.Shoot

-- // Rayfield UI Setup
local Window = Rayfield:CreateWindow({
	Name = "Spare Stack",
	LoadingTitle = "Loading...",
	ConfigurationSaving = { Enabled = false }
})

local mainTab = Window:CreateTab("Main", 4483362458)
local playerTab = Window:CreateTab("Player", 4483362458)
local miscTab = Window:CreateTab("Misc", 4483362458)

-- // Auto Green
local autoGreenEnabled = false

local function runShootingSequence()
	StartShoot:FireServer()
	task.wait(0.23)
	Shoot:FireServer(1)
	task.wait(0.23)
	Shoot:FireServer(0)
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if autoGreenEnabled and input.KeyCode == Enum.KeyCode.E then
		runShootingSequence()
	end
end)

mainTab:CreateToggle({
	Name = "Enable Auto Green (E key)",
	CurrentValue = false,
	Callback = function(state)
		autoGreenEnabled = state
	end
})

-- // Walkspeed
local walkspeedEnabled = false
local walkspeedValue = 16
local moveConnection

local function cframeWalkspeed()
	if moveConnection then
		moveConnection:Disconnect()
		moveConnection = nil
	end

	if walkspeedEnabled then
		moveConnection = RunService.Heartbeat:Connect(function(deltaTime)
			local char = localPlayer.Character
			local hrp = char and char:FindFirstChild("HumanoidRootPart")
			local humanoid = char and char:FindFirstChildOfClass("Humanoid")
			if hrp and humanoid then
				local moveDir = humanoid.MoveDirection
				if moveDir.Magnitude > 0 then
					hrp.CFrame = hrp.CFrame + (moveDir.Unit * walkspeedValue * deltaTime)
				end
			end
		end)
	end
end

playerTab:CreateToggle({
	Name = "Enable Walkspeed",
	CurrentValue = false,
	Callback = function(state)
		walkspeedEnabled = state
		cframeWalkspeed()
	end
})

playerTab:CreateSlider({
	Name = "Walkspeed Value",
	Range = {1, 100},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = 16,
	Callback = function(value)
		walkspeedValue = value
	end
})

-- // Hitbox Expander
local hitboxEnabled = false
local hitboxRadius = 50
local hitboxConnection

local function simulateTouch(ball)
	local character = localPlayer.Character
	local rootPart = character and character:FindFirstChild("HumanoidRootPart")
	if rootPart then
		firetouchinterest(rootPart, ball, 0)
		task.wait()
		firetouchinterest(rootPart, ball, 1)
	end
end

local function hitboxExpander()
	if hitboxConnection then
		hitboxConnection:Disconnect()
		hitboxConnection = nil
	end

	if hitboxEnabled then
		hitboxConnection = RunService.Heartbeat:Connect(function()
			local char = localPlayer.Character
			local rootPart = char and char:FindFirstChild("HumanoidRootPart")
			if not rootPart then return end

			for _, ball in pairs(Workspace:GetChildren()) do
				if ball:IsA("BasePart") and ball.Name == "Basketball" then
					if (ball.Position - rootPart.Position).Magnitude <= hitboxRadius then
						simulateTouch(ball)
					end
				end
			end
		end)
	end
end

playerTab:CreateToggle({
	Name = "Enable Hitbox Expander",
	CurrentValue = false,
	Callback = function(state)
		hitboxEnabled = state
		hitboxExpander()
	end
})

playerTab:CreateSlider({
	Name = "Hitbox Radius",
	Range = {10, 100},
	Increment = 1,
	Suffix = "Studs",
	CurrentValue = 50,
	Callback = function(value)
		hitboxRadius = value
	end
})

-- // Noclip
local noclipEnabled = false
local noclipConnection

local function setCollisions(state)
	local char = localPlayer.Character
	if not char then return end

	for _, part in ipairs(char:GetDescendants()) do
		if part:IsA("BasePart") then
			part.CanCollide = state
		end
	end
end

local function noclip()
	if noclipConnection then
		noclipConnection:Disconnect()
		noclipConnection = nil
	end

	if noclipEnabled then
		noclipConnection = RunService.Stepped:Connect(function()
			local char = localPlayer.Character
			if char then
				for _, part in ipairs(char:GetDescendants()) do
					if part:IsA("BasePart") then
						part.CanCollide = false
					end
				end
			end
		end)
	else
		setCollisions(true)
	end
end

playerTab:CreateToggle({
	Name = "Enable Noclip",
	CurrentValue = false,
	Callback = function(state)
		noclipEnabled = state
		noclip()
	end
})
