-- Load Venyx UI
local Venyx = loadstring(game:HttpGet("https://raw.githubusercontent.com/Stefanuk12/Venyx-UI-Library/main/source2.lua"))()
local UI = Venyx.new({title = "Spare Stack"})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local localPlayer = Players.LocalPlayer

local ControlServiceRE = ReplicatedStorage.Packages.Knit.Services.ControlService.RE
local StartShoot = ControlServiceRE.StartShoot
local Shoot = ControlServiceRE.Shoot

-- ==== Variables ====
local autoGreenEnabled = false
local inputConnection

local walkspeedEnabled = false
local walkspeedValue = 16
local moveConnection

local hitboxEnabled = false
local hitboxRadius = 50
local hitboxConnection

local noclipEnabled = false
local noclipConnection
local noclipKey = Enum.KeyCode.N -- default key

-- ==== Functions ====

-- Auto Green
local function runShootingSequence()
	StartShoot:FireServer()
	wait(0.23)
	Shoot:FireServer(1)
	wait(0.23)
	Shoot:FireServer(0)
end

-- Noclip
local function setCollisions(state)
	local character = localPlayer.Character
	if not character then return end

	for _, part in pairs(character:GetDescendants()) do
		if part:IsA("BasePart") then
			part.CanCollide = state
		end
	end
end

local function noclip()
	if noclipConnection then
		noclipConnection:Disconnect()
		noclipConnection = nil
	end

	if noclipEnabled then
		noclipConnection = RunService.Stepped:Connect(function()
			local character = localPlayer.Character
			if not character then return end

			for _, part in pairs(character:GetDescendants()) do
				if part:IsA("BasePart") and part.CanCollide then
					part.CanCollide = false
				end
			end
		end)
	else
		setCollisions(true)
	end
end

-- Walkspeed
local function cframeWalkspeed()
	if moveConnection then
		moveConnection:Disconnect()
		moveConnection = nil
	end
	
	if walkspeedEnabled then
		moveConnection = RunService.Heartbeat:Connect(function(deltaTime)
			local char = localPlayer.Character
			if not char then return end
			local hrp = char:FindFirstChild("HumanoidRootPart")
			local humanoid = char:FindFirstChildOfClass("Humanoid")
			if not hrp or not humanoid then return end
			
			local moveDir = humanoid.MoveDirection
			if moveDir.Magnitude > 0 then
				hrp.CFrame = hrp.CFrame + (moveDir.Unit * walkspeedValue * deltaTime)
			end
		end)
	end
end

-- Hitbox Expander
local function simulateTouch(ball)
	local character = localPlayer.Character
	if not character then return end
	local rootPart = character:FindFirstChild("HumanoidRootPart")
	if not rootPart then return end

	firetouchinterest(rootPart, ball, 0)
	task.wait()
	firetouchinterest(rootPart, ball, 1)
end

local function hitboxExpander()
	if hitboxConnection then
		hitboxConnection:Disconnect()
		hitboxConnection = nil
	end

	if hitboxEnabled then
		hitboxConnection = RunService.Heartbeat:Connect(function()
			local character = localPlayer.Character
			if not character then return end
			local rootPart = character:FindFirstChild("HumanoidRootPart")
			if not rootPart then return end

			for _, ball in pairs(Workspace:GetChildren()) do
				if ball:IsA("BasePart") and ball.Name == "Basketball" then
					local distance = (ball.Position - rootPart.Position).Magnitude
					if distance <= hitboxRadius then
						simulateTouch(ball)
					end
				end
			end
		end)
	end
end

-- Input Handler
local function onInputBegan(input, gameProcessed)
	if gameProcessed then return end

	if autoGreenEnabled and input.KeyCode == Enum.KeyCode.E then
		runShootingSequence()
	end

	-- Custom Noclip Keybind
	if input.KeyCode == noclipKey then
		noclipEnabled = not noclipEnabled
		noclip()
		Venyx:Notify("Noclip", noclipEnabled and "Enabled" or "Disabled")
	end
end

-- ==== UI Setup ====

-- Main Page
local MainPage = UI:addPage({title = "Main"})
local MainSection = MainPage:addSection({title = "Auto Green"})

MainSection:addToggle({
	title = "Enable Auto Green (E key)",
	callback = function(state)
		autoGreenEnabled = state
		if state then
			if not inputConnection then
				inputConnection = UserInputService.InputBegan:Connect(onInputBegan)
			end
		else
			if inputConnection then
				inputConnection:Disconnect()
				inputConnection = nil
			end
		end
	end
})

-- Player Page
local PlayerPage = UI:addPage({title = "Player"})

-- Walkspeed
local PlayerSection = PlayerPage:addSection({title = "Walkspeed (CFrame)"})

PlayerSection:addToggle({
	title = "Enable Walkspeed",
	callback = function(state)
		walkspeedEnabled = state
		cframeWalkspeed()
	end
})

PlayerSection:addSlider({
	title = "Walkspeed Value",
	min = 1,
	max = 100,
	default = 16,
	callback = function(value)
		if typeof(value) == "number" then
			walkspeedValue = value
			if walkspeedEnabled then
				cframeWalkspeed()
			end
		end
	end
})

-- Hitbox Expander
local HitboxSection = PlayerPage:addSection({title = "Hitbox Expander"})

HitboxSection:addToggle({
	title = "Enable Hitbox Expander",
	callback = function(state)
		hitboxEnabled = state
		hitboxExpander()
	end
})

HitboxSection:addSlider({
	title = "Hitbox Radius",
	min = 10,
	max = 100,
	default = 50,
	callback = function(value)
		if typeof(value) == "number" then
			hitboxRadius = value
		end
	end
})

-- Noclip Section
local NoclipSection = PlayerPage:addSection({title = "Noclip"})

NoclipSection:addToggle({
	title = "Enable Noclip",
	callback = function(state)
		noclipEnabled = state
		noclip()
	end
})

NoclipSection:addKeybind({
	title = "Noclip Toggle Key",
	default = Enum.KeyCode.N,
	callback = function(key)
		noclipKey = key
	end
})

-- Init
UI:SelectPage(MainPage)
UserInputService.InputBegan:Connect(onInputBegan)
