-- // Game Check
local targetGameId = 4581966615 -- Basketball Legends PlaceId
if game.PlaceId ~= targetGameId then
    game:GetService("Players").LocalPlayer:Kick("This script is designed for Basketball Legends only!")
    return
end

-- // Load Fluent UI Library with Error Handling
local Fluent, SaveManager, InterfaceManager
local success, err = pcall(function()
    Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
end)

if not success or not Fluent then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Error",
        Text = "Failed to load Fluent UI library: " .. tostring(err),
        Duration = 5
    })
    return
end

-- // Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")

local localPlayer = Players.LocalPlayer

-- // RemoteEvents with Error Handling
local ControlServiceRE, StartShoot, Shoot
local success, err = pcall(function()
    ControlServiceRE = ReplicatedStorage:WaitForChild("Packages", 5):WaitForChild("Knit", 5):WaitForChild("Services", 5):WaitForChild("ControlService", 5):WaitForChild("RE", 5)
    StartShoot = ControlServiceRE:WaitForChild("StartShoot", 5)
    Shoot = ControlServiceRE:WaitForChild("Shoot", 5)
end)

if not success or not StartShoot or not Shoot then
    StarterGui:SetCore("SendNotification", {
        Title = "Error",
        Text = "Failed to find RemoteEvents: " .. tostring(err),
        Duration = 5
    })
    return
end

-- // Fluent UI Setup
local Window = Fluent:CreateWindow({
    Title = "Spare Stack - Fluent",
    SubTitle = "Converted from Rayfield",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- Disabled to prevent full-screen blur
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Home = Window:AddTab({ Title = "Home", Icon = "home" }),
    Main = Window:AddTab({ Title = "Main", Icon = "zap" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    AntiExploiter = Window:AddTab({ Title = "Anti-Exploiter", Icon = "shield" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "settings" })
}

local Options = Fluent.Options

-- // Home Tab Content
Tabs.Home:AddParagraph({
    Title = "Script Information",
    Content = "Last Updated: August 4, 2025\nVersion: 1.0.1\nOwner: YourName\n\nWelcome to Spare Stack! Use the tabs to access features like Auto Green, Walkspeed, and more."
})

-- // Auto Green Feature
local autoGreenEnabled = false

local function runShootingSequence()
    local function fireWithRetry(remote, ...)
        local attempts = 3
        local success, err
        for i = 1, attempts do
            success, err = pcall(function() remote:FireServer(...) end)
            if success then return true end
            task.wait(0.1) -- Small delay between retries
        end
        StarterGui:SetCore("SendNotification", {
            Title = "Error",
            Text = "Failed to fire " .. remote.Name .. " after " .. attempts .. " attempts: " .. tostring(err),
            Duration = 3
        })
        return false
    end

    coroutine.wrap(function()
        if fireWithRetry(StartShoot) then
            task.wait(0.23)
            if fireWithRetry(Shoot, 1) then
                task.wait(0.23)
                fireWithRetry(Shoot, 0)
            end
        end
    end)()
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if autoGreenEnabled and input.KeyCode == Enum.KeyCode.E then
        runShootingSequence()
    end
end)

Tabs.Main:AddToggle("AutoGreenToggle", {
    Title = "Enable Auto Green (E key)",
    Default = false,
    Description = "Press E to trigger the shooting sequence automatically."
}):OnChanged(function(state)
    autoGreenEnabled = state
    StarterGui:SetCore("SendNotification", {
        Title = "Auto Green",
        Text = state and "Enabled" or "Disabled",
        Duration = 3
    })
end)

-- // Walkspeed Feature
local walkspeedEnabled, walkspeedValue = false, 16
local moveConnection

local function cframeWalkspeed()
    if moveConnection then moveConnection:Disconnect() end
    if walkspeedEnabled then
        moveConnection = RunService.Heartbeat:Connect(function(dt)
            local char = localPlayer.Character
            local hrp = char and char:FindFirstChild("HumanoidRootPart")
            local hum = char and char:FindFirstChildOfClass("Humanoid")
            if hrp and hum then
                local moveDir = hum.MoveDirection
                if moveDir.Magnitude > 0 then
                    hrp.CFrame = hrp.CFrame + moveDir.Unit * walkspeedValue * dt
                end
            end
        end)
    end
end

Tabs.Player:AddToggle("WalkspeedToggle", {
    Title = "Enable Walkspeed",
    Default = false,
    Description = "Adjust your movement speed."
}):OnChanged(function(state)
    walkspeedEnabled = state
    cframeWalkspeed()
    StarterGui:SetCore("SendNotification", {
        Title = "Walkspeed",
        Text = state and "Enabled" or "Disabled",
        Duration = 3
    })
end)

Tabs.Player:AddSlider("WalkspeedSlider", {
    Title = "Walkspeed Value",
    Description = "Set your custom walkspeed.",
    Min = 1,
    Max = 100,
    Default = 16,
    Rounding = 0
}):OnChanged(function(val)
    walkspeedValue = val
end)

-- // Hitbox Expander Feature
local hitboxEnabled, hitboxRadius = false, 50
local hitboxConnection

local function simulateTouch(ball)
    local char = localPlayer.Character
    local root = char and char:FindFirstChild("HumanoidRootPart")
    if root then
        pcall(function()
            firetouchinterest(root, ball, 0)
            task.wait()
            firetouchinterest(root, ball, 1)
        end)
    end
end

local function hitboxExpander()
    if hitboxConnection then hitboxConnection:Disconnect() end
    if hitboxEnabled then
        hitboxConnection = RunService.Heartbeat:Connect(function()
            local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
            if not root then return end
            for _, ball in pairs(Workspace:GetChildren()) do
                if ball:IsA("BasePart") and ball.Name == "Basketball" then
                    if (ball.Position - root.Position).Magnitude <= hitboxRadius then
                        simulateTouch(ball)
                    end
                end
            end
        end)
    end
end

Tabs.Player:AddToggle("HitboxToggle", {
    Title = "Enable Hitbox Expander",
    Default = false,
    Description = "Increase the hitbox radius for basketballs."
}):OnChanged(function(state)
    hitboxEnabled = state
    hitboxExpander()
    StarterGui:SetCore("SendNotification", {
        Title = "Hitbox Expander",
        Text = state and "Enabled" or "Disabled",
        Duration = 3
    })
end)

Tabs.Player:AddSlider("HitboxSlider", {
    Title = "Hitbox Radius",
    Description = "Set the radius for the hitbox expander.",
    Min = 10,
    Max = 100,
    Default = 50,
    Rounding = 0
}):OnChanged(function(val)
    hitboxRadius = val
end)

-- // Noclip Feature
local noclipEnabled = false
local noclipConnection

local function setCollisions(state)
    local char = localPlayer.Character
    if not char then return end
    for _, p in ipairs(char:GetDescendants()) do
        if p:IsA("BasePart") then p.CanCollide = state end
    end
end

local function noclip()
    if noclipConnection then noclipConnection:Disconnect() end
    if noclipEnabled then
        noclipConnection = RunService.Stepped:Connect(function()
            local char = localPlayer.Character
            if char then
                for _, p in ipairs(char:GetDescendants()) do
                    if p:IsA("BasePart") then p.CanCollide = false end
                end
            end
        end)
    else
        setCollisions(true)
    end
end

Tabs.Player:AddToggle("NoclipToggle", {
    Title = "Enable Noclip",
    Default = false,
    Description = "Pass through walls and objects."
}):OnChanged(function(state)
    noclipEnabled = state
    noclip()
    StarterGui:SetCore("SendNotification", {
        Title = "Noclip",
        Text = state and "Enabled" or "Disabled",
        Duration = 3
    })
end)

-- // Auto Guard Feature
local autoGuardUIEnabled, autoGuardActive = false, false
local currentTarget = nil
local offsetDistance = 4

local predictionSphere = Instance.new("Part")
predictionSphere.Name = "PredictionSphere"
predictionSphere.Shape = Enum.PartType.Ball
predictionSphere.Anchored = true
predictionSphere.CanCollide = false
predictionSphere.Material = Enum.Material.Neon
predictionSphere.Size = Vector3.new(2, 2, 2)
predictionSphere.Color = Color3.fromRGB(255, 0, 0)
predictionSphere.Transparency = 1
predictionSphere.Parent = Workspace

local function hasToolEquipped(char)
    if not char then return false end
    for _, item in ipairs(char:GetChildren()) do
        if item:IsA("Tool") then return true end
    end
    return false
end

local function getFirstValidTarget()
    local hrp = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    local closest, minDist = nil, math.huge
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= localPlayer and plr.Character then
            local tHRP = plr.Character:FindFirstChild("HumanoidRootPart")
            if tHRP and hasToolEquipped(plr.Character) then
                local dist = (hrp.Position - tHRP.Position).Magnitude
                if dist < minDist then
                    minDist = dist
                    closest = plr
                end
            end
        end
    end
    return closest
end

RunService.Heartbeat:Connect(function()
    if not autoGuardUIEnabled or not autoGuardActive then
        predictionSphere.Transparency = 1
        currentTarget = nil
        return
    end

    local hrp = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    if not currentTarget then
        currentTarget = getFirstValidTarget()
    end

    if currentTarget and currentTarget.Character then
        local tHRP = currentTarget.Character:FindFirstChild("HumanoidRootPart")
        if hasToolEquipped(currentTarget.Character) and tHRP then
            local frontPos = tHRP.Position + tHRP.CFrame.LookVector * offsetDistance
            predictionSphere.Position = frontPos
            predictionSphere.Transparency = 0.5
            hrp.CFrame = CFrame.new(frontPos, tHRP.Position)
        else
            predictionSphere.Transparency = 1
            currentTarget = nil
        end
    end
end)

Tabs.Main:AddToggle("AutoGuardToggle", {
    Title = "Enable Auto Guard",
    Default = false,
    Description = "Press T to toggle tracking of players with tools."
}):OnChanged(function(state)
    autoGuardUIEnabled = state
    if not state then
        autoGuardActive = false
        currentTarget = nil
        predictionSphere.Transparency = 1
    end
    StarterGui:SetCore("SendNotification", {
        Title = "Auto Guard",
        Text = state and "Enabled (Press T to toggle)" or "Disabled",
        Duration = 3
    })
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.T then
        if autoGuardUIEnabled then
            autoGuardActive = not autoGuardActive
            if not autoGuardActive then
                currentTarget = nil
                predictionSphere.Transparency = 1
            end
            StarterGui:SetCore("SendNotification", {
                Title = "Auto Guard",
                Text = autoGuardActive and "Tracking Enabled" or "Tracking Disabled",
                Duration = 3
            })
        end
    end
end)

-- // Initialize Save and Interface Managers
SaveManager:BuildConfigSection(Tabs.Misc)
InterfaceManager:BuildInterfaceSection(Tabs.Misc)
